name: Production build and deploy
on:
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Build nodejs application
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - run: cd Front && npm install && npm run build

      # Copy frontend assets and build java application
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - run: |
          mkdir -p Back/src/main/resources/assets || true && cp -r Front/dist/* Back/src/main/resources/assets
          cd Back && mvn clean package

      # Copy the artifact and build docker image
      - name: Copy built application package for docker and build an image
        run: |
          cp Back/target/GI.war Docker/Production/build/GI.war
          docker build -t ${{secrets.DOCKER_IMAGE_NAME}} Docker/Production

      # Deploy application to production
      - name: Deploy application to production
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
      - run: |
          aws ecr get-login-password | docker login --password-stdin ${{secrets.DOCKER_REGISTRY_URL}}
          docker push ${{secrets.DOCKER_IMAGE_NAME}}
          aws ecs update-service --cluster ${{secrets.AWS_ECS_CLUSTER_NAME}} --service ${{secrets.AWS_ECS_SERVICE_NAME}} --force-new-deployment

